// Code generated by protoc-gen-go-yeti. DO NOT EDIT.
// versions:
// - protoc-gen-go-yeti v0.0.0
// - protoc             v4.23.2
// source: proto/test/test.proto

package test

import (
	fmt "fmt"
	yeti "github.com/sauvikbiswas/yeti"
	protojson "google.golang.org/protobuf/encoding/protojson"
)

func (x *TestProto) New() yeti.Record {
	return &TestProto{}
}

func (x *TestProto) YetiSerialize() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *TestProto) YetiDeserialize(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *TestProto) YetiType() string {
	return "TestProto"
}

func (x *TestProto) YetiKey() (string, error) {
	var err error
	if x.GetName() == "" {
		return "", fmt.Errorf("name is not set")
	}
	key := x.GetName()
	return key, err
}

func (x *TestProtoWithCompositeKey) New() yeti.Record {
	return &TestProtoWithCompositeKey{}
}

func (x *TestProtoWithCompositeKey) YetiSerialize() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *TestProtoWithCompositeKey) YetiDeserialize(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *TestProtoWithCompositeKey) YetiType() string {
	return "TestProtoWithCompositeKey"
}

func (x *TestProtoWithCompositeKey) YetiKey() (string, error) {
	var err error
	if x.GetName() == "" {
		return "", fmt.Errorf("name is not set")
	}
	if x.GetAgeAsString() == "" {
		return "", fmt.Errorf("age_as_string is not set")
	}
	key := x.GetName() + x.GetAgeAsString()
	return key, err
}

func (x *TestProtoWithNonStringPrimaryKey) New() yeti.Record {
	return &TestProtoWithNonStringPrimaryKey{}
}

func (x *TestProtoWithNonStringPrimaryKey) YetiSerialize() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *TestProtoWithNonStringPrimaryKey) YetiDeserialize(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *TestProtoWithNonStringPrimaryKey) YetiType() string {
	return "TestProtoWithNonStringPrimaryKey"
}

func (x *TestProtoWithNonStringPrimaryKey) YetiKey() (string, error) {
	var err error
	// cannot use non-string field age as part of primary key
	if x.GetName() == "" {
		return "", fmt.Errorf("name is not set")
	}
	key := x.GetName()
	return key, err
}
